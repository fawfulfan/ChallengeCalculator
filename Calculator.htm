<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Calculator 8</title>
</head>

<body>
	<div><textarea id="numbersToAdd" rows="5" cols="60" placeholder="Enter numbers to add..."/></textarea></div>
	<div><input type="button" value="Calculate" onclick="main();"/></div>
</body>

<script>
	function main()
	{
		// Get the user input
		var strUserInput = document.getElementById("numbersToAdd").value;

		// Define the default delimiters
		var aDelimiters = [',', '\n'];

		// Get the custom delimiters, if defined
		aDelimiters = aDelimiters.concat(getDelimiters(strUserInput));

		// Clear any delimiter definitions from the user input
		strUserInput = clearDelimiterDefinitions(strUserInput);

		// Separate out all values
		var aValues = parseValues(strUserInput, aDelimiters);

		// Verify there are no negative numbers input
		var aNegatives = findNegatives(aValues);
		if (aNegatives.length > 0)
		{
			throwNegativeException(aNegatives);
		}
		else
		{
			// Add together all values
			var nSum = addValues(aValues);

			// Display the value
			alert(nSum);
		}
	}

	function getDelimiters(strUserInput)
	{
		// Initialize delimiter list
		var aDelimiters = [];

		// Verify the input is long enough to support a delimiter
		if (strUserInput.length >= 2)
		{
			// Check for a delimiter defining bracket
			if (strUserInput[0] === '[')
			{
				// Create the delimiter
				var bOpenBrackets = true;
				var strDelimiter = "";
				var nInputIndex = 1;
				while (nInputIndex < strUserInput.length)
				{
					// Check if all delimiters are done
					if (strUserInput[nInputIndex] === '\n')
					{
						break;
					}
					
					// Check if a new delimiter is being defined
					else if (strUserInput[nInputIndex] === '[')
					{
						bOpenBrackets = true;;
					}

					// Check if the delimiter terminates
					else if (strUserInput[nInputIndex] === ']')
					{
						// Check if a valid delimiter is defined
						if (strDelimiter !== "" && isNaN(strDelimiter))
						{
							// Add the delimiter
							aDelimiters.push(strDelimiter);

							// Close the delimiter
							bOpenBrackets = false;
							strDelimiter = "";
						}
					}

					// Add the next character to the delimiter
					else if (bOpenBrackets)
					{
						strDelimiter += strUserInput[nInputIndex];
					}

					// Check the next character
					++nInputIndex;
				}
			}

			// Otherwise, the first character is not a number, and the second character is a newline
			else if (isNaN(strUserInput[0]) && strUserInput[1] === '\n')
			{
				// The first character is the delimiter
				aDelimiters.push(strUserInput[0]);
			}
		}

		// Return the list of delimiters
		return aDelimiters;
	}

	function clearDelimiterDefinitions(strUserInput)
	{
		// Verify the input is long enough to support a delimiter
		if (strUserInput.length >= 2)
		{
			// Verify there are custom delimiters defined
			if (strUserInput[0] === '[')
			{
				// If there is no newline, this input contains no numbers
				if (strUserInput.indexOf('\n') === -1)
				{
					strUserInput = "";
				}

				// Otherwise, remove the delimiters from the input
				else
				{
					strUserInput = strUserInput.slice(strUserInput.indexOf('\n') + 1);
				}
			}
		}

		// Return the cleaned up user input
		return strUserInput;
	}

	function parseValues(strUserInput, aDelimiters)
	{
		// Initialize the list of values
		var aValues = [];

		// Check each character in the list
		var strValue = "";
		var nInputIndex = 0;
		while (nInputIndex <= strUserInput.length)
		{
			// Check whether a delimiter exists and if so, how many spaces need to be jumped
			var nDelimiterSpacesToJump = checkDelimiters(aDelimiters, strUserInput, nInputIndex);

			// Check if this is the end of the input or a delimiter
			if (nInputIndex === strUserInput.length || nDelimiterSpacesToJump > 0)
			{
				// Verify that there is a value to parse
				if (strValue !== "")
				{
					// Verify that the value up to this point is a valid number
					var nValue = parseInt(strValue);

					// If the value is not a number, evaluate the value as 0
					if (isNaN(nValue))
					{
						nValue = 0;
					}

					// If the value is not greater than 1000, add it to the value list
					if (nValue <= 1000)
					{
						aValues.push(nValue);
					}

					// Reset the string containing the value
					strValue = "";

					// Jump the necessary number of spaces to skip the delimiter
					nInputIndex += Math.max(nDelimiterSpacesToJump - 1, 0);
				}
			}

			// For any other kind of character, add it to the value string
			else
			{
				strValue += strUserInput[nInputIndex];
			}

			++nInputIndex;
		}
		
		// Return all the values that have been found
		return aValues;
	}

	function checkDelimiters(aDelimiters, strUserInput, nInputIndex)
	{
		// Initialize the maximum length of the delimiter found at this index
		var nMaxDelimiterLength = 0;

		// Check each defined delimiter
		for (var nDelimiterIndex = 0; nDelimiterIndex < aDelimiters.length; ++nDelimiterIndex)
		{
			// If the delimiter exists at this index, update the maximum length of the delimiter
			if (strUserInput.substring(nInputIndex, nInputIndex + aDelimiters[nDelimiterIndex].length) === aDelimiters[nDelimiterIndex])
			{
				nMaxDelimiterLength = Math.max(nMaxDelimiterLength, aDelimiters[nDelimiterIndex].length);
			}
		}

		// Return the maximum length of the delimiter
		return nMaxDelimiterLength;
	}

	function addValues(aValues)
	{
		// Check each value
		var nSum = 0;
		for (var nValueIndex = 0; nValueIndex < aValues.length; ++nValueIndex)
		{
			// Add the value to the total
			nSum += aValues[nValueIndex];
		}

		// Return the total value
		return nSum;
	}

	function findNegatives(aValues)
	{
		// Check each value
		var aNegatives = [];
		for (var nValueIndex = 0; nValueIndex < aValues.length; ++nValueIndex)
		{
			// Grab any negative values
			if (aValues[nValueIndex] < 0)
			{
				aNegatives.push(aValues[nValueIndex]);
			}
		}

		// Return all negatives found
		return aNegatives;
	}

	function throwNegativeException(aNegatives)
	{
		// Get first negative
		var strException = "Error: Invalid numbers given: " + aNegatives[0];
		
		// Get each subsequent negative
		for (var nNegativeIndex = 1; nNegativeIndex < aNegatives.length; ++nNegativeIndex)
		{
			strException += ", " + aNegatives[nNegativeIndex];
		}

		// Throw the exception
		throw strException;
	}
</script>
</html>