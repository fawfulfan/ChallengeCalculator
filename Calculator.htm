<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Calculator 6</title>
</head>

<body>
	<div><textarea id="numbersToAdd" rows="5" cols="60" placeholder="Enter numbers to add..."/></textarea></div>
	<div><input type="button" value="Calculate" onclick="main();"/></div>
</body>

<script>
	function main()
	{
		// Get the user input
		var strUserInput = document.getElementById("numbersToAdd").value;

		// Get the custom delimiter, if defined
		var strDelimiter = getCustomDelimiter(strUserInput);

		// Separate out all values using default and custom delimiters
		var aValues = [];
		if (strDelimiter === "")
		{
			aValues = parseValues(strUserInput);
		}
		else
		{
			aValues = parseValues(strUserInput, strDelimiter);
		}

		// Verify there are no negative numbers input
		var aNegatives = findNegatives(aValues);
		if (aNegatives.length > 0)
		{
			throwNegativeException(aNegatives);
		}
		else
		{
			// Add together all values
			var nSum = addValues(aValues);

			// Display the value
			alert(nSum);
		}
	}

	function getCustomDelimiter(strUserInput)
	{
		// If a blank string is returned, there is no custom delimiter
		var strDelimiter = "";

		// Verify the input is long enough to support a custom delimiter
		if (strUserInput.length >= 2)
		{
			// Verify the first character is not a number, and the second character is a newline
			if (isNaN(strUserInput[0]) && strUserInput[1] === "\n")
			{
				// The first character is the custom delimiter
				strDelimiter = strUserInput[0];
			}
		}

		// Return the custom delimiter
		return strDelimiter;
	}

	function parseValues(strUserInput, strDelimiter)
	{
		// Initialize the list of values
		var aValues = [];

		// Check each character in the list
		var strValue = "";
		var nInputIndex = 0;
		while (nInputIndex <= strUserInput.length)
		{
			// Check if this is the end of the input or a delimiter
			if (nInputIndex === strUserInput.length || strUserInput[nInputIndex] === "," || strUserInput[nInputIndex] === "\n" || strDelimiter != null && strUserInput[nInputIndex] === strDelimiter)
			{
				// Verify that there is a value to parse
				if (strValue !== "")
				{
					// Verify that the value up to this point is a valid number
					var nValue = parseInt(strValue);

					// If the value is not a number, evaluate the value as 0
					if (isNaN(nValue))
					{
						nValue = 0;
					}

					// If the value is not greater than 1000, add it to the value list
					if (nValue <= 1000)
					{
						aValues.push(nValue);
					}

					// Reset the string containing the value
					strValue = "";
				}
			}

			// For any other kind of character, add it to the value string
			else
			{
				strValue += strUserInput[nInputIndex];
			}

			++nInputIndex;
		}
		
		// Return all the values that have been found
		return aValues;
	}

	function addValues(aValues)
	{
		// Check each value
		var nSum = 0;
		for (var nValueIndex = 0; nValueIndex < aValues.length; ++nValueIndex)
		{
			// Add the value to the total
			nSum += aValues[nValueIndex];
		}

		// Return the total value
		return nSum;
	}

	function findNegatives(aValues)
	{
		// Check each value
		var aNegatives = [];
		for (var nValueIndex = 0; nValueIndex < aValues.length; ++nValueIndex)
		{
			// Grab any negative values
			if (aValues[nValueIndex] < 0)
			{
				aNegatives.push(aValues[nValueIndex]);
			}
		}

		// Return all negatives found
		return aNegatives;
	}

	function throwNegativeException(aNegatives)
	{
		// Get first negative
		var strException = "Error: Invalid numbers given: " + aNegatives[0];
		
		// Get each subsequent negative
		for (var nNegativeIndex = 1; nNegativeIndex < aNegatives.length; ++nNegativeIndex)
		{
			strException += ", " + aNegatives[nNegativeIndex];
		}

		// Throw the exception
		throw strException;
	}
</script>
</html>